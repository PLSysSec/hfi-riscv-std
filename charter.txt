
Hardware Assisted Fault Isolation (HFI) on the  RISC-V platforms

Chairs: FILL ME IN

Hardware Assisted Fault Isolation (HFI) defines mechanisms for enabling
efficient isolation ("sandboxing") and sharing within a common virtual address
space---the terms sandboxing, compartmentaliztion, and in-process isolation are
similary used for this class of technology.

HFI differs from previous approaches in that it is explicity designed to support
hardware-only isolation of unmodified existing native binaries, and hardware
assisted isolation of "hybrid" workloads where there is a "sandboxing
compiler" such as WebAssembly, or other custom software based isolation
schemes, such as v8's UberCage.

This TG will define the threat model, reference architecture and interfaces for
Hardware Assisted Fault Isolation on RISC-V Application Processor-based
platforms to support workloads including but not limited to: (1) Sandboxing of
legacy C/C++ "native" code in legacy applications for security hardening---such
as native code used in Databases, Webbrowsers, Mobile Applications, and Embedded
Applications, that will continue to depend on legacy C/C++ code for the
forseable future. (2) Hardware Assisted Isolation of WebAssembly as used in
browsers and serverless settings---offering hardware support to overcome the
performance, security, scalability, and compatibility limitations of software
based isolation---notably the goal here is not the whole sale replacement of the
sandboxing toolchain, rather, it is to provide primitives that address these
challenges with minimal changes to the existing softwre stack. (3) Ad-hoc
hardware/software sandboxing systems, such as v8's Ubercage.

The TG will focus on developing mechanisms to support isolation, sharing, and
interposition on privileged instruction for sandboxed code---thus, HFI will
offer complete meditation of the hardware interface, enabling the construction
of light weight reference monitors (sandboxing runtimes), to that can enforce
access controls policies on code running in sandbox.

### Up to here
The TG aims to deliver:

- A non-ISA specification for an ABI between the TCB and non-TCB components.
  This ABI enables OS/VMM software to manage confidential workloads, while
  keeping the OS/VMM software, firmware, developers and system operators outside
  the TCB. A related non-ISA specification for an ABI between the TCB and
  workload components e.g. a TEE VM will be specified.   
  
- Â ISA extensions required to fill potential gaps in the ratified privileged ISA
  (specifically H-extension) needed to satisfy security, performance, TCB
  isolation, and attestation requirements of various deployment models. Creation
  of new ISA extensions will be in collaboration with the Privileged Arch. TG
  and will work with the Priv committee to proceed in the appropriate fashion
  (as part of this TG or a new TG under priv or fastrack).  
  
- A non-normative security analysis document for implementers of this capability
  that describes platform recommendations.

Development of these specifications will happen in collaboration with other
SIGs/TGs, such as Privileged Arch., Hypervisor, Microarchitecture Side Channels,
IOMMU, and Runtime Integrity.

As part of the DoD, the TG will create at least one open-source implementation.
The POC consists of required SBI extension(s) for the proposed interfaces hosted
by TCB elements e.g., a software and/or hardware-based TEE Security Manager
(TSM). The required changes will be made to the Linux/KVM host and Linux guest
software to validate the proposed interface. Any ISA proposals made will be
modeled via tools such as QEMU/Spike to support the POC.
