Hardware Assisted Fault Isolation (HFI) on the  RISC-V platforms

Chairs: FILL ME IN

Hardware Assisted Fault Isolation (HFI) defines mechanisms for enabling
efficient fine grain isolation: including memory isolation, memory
sharing, and interposition on privileged instructions within a common virtual
address space. The terms sandboxing, compartmentalization, and in-process
isolation are generally used for this class of technology.

HFI is designed to support both unmodified existing native binaries, and
hardware assisted isolation of "hybrid" workloads where there is a "sandboxing
compiler" such as WebAssembly, or other custom software based isolation
schemes, such as v8's UberCage.

This TG will define the threat model, reference architecture and interfaces for
Hardware Assisted Fault Isolation on RISC-V Application Processor.

Use cases for HFI include but are not limited to: (1) Sandboxing of legacy
C/C++ "native" code in existing applications and library ecosystems.  (2)
Hardware assistance for software based isolation systems such as WebAssembly,
and custom sandboxing systems (e.g v8's UberCage), that have significant
performance, assurance, security (e.g. Spectre safety), and scalability
limitations as a result of insufficient hardware support. (3) Hardware based 
isolation of native binaries in contexts where software based isolation is
used today such as nanoservice and serverless (edge and non-edge) settings, 
safe extensibility, etc.

The TG aims to deliver:

- A non-ISA specification for an ABI between the TCB and non-TCB components.
  This ABI enables the development of ''sandboxing runtimes'' (that are part of
  the TCB), that can multiplex one or more untrusted sandboxes, facilitate
  efficient communication between these sandboxes, and the TCB components,
  and enforce least privileged access to the TCB and privileged hardware
  resources by sandboxed code.

- An ISA spec with minimal ISA primitives required to implement and enforce HFI.

- A non-normative security analysis document for implementers of this
  capability that describes platform recommendations.

Development of these specifications will happen in collaboration with Security
HC and other related SIGS (e.g. Runtime Integrity SIG) and TGs.

As part of the definition of done (DoD), the TG will create at least one
open-source implementation.  Including an HFI-enabled Wasm runtime, an
HFI-enabled runtime for sandboxing native binaries, with supporting tools and
test frameworks to validate the functional correctness of the implementations.
Any ISA proposals made will be modeled via tools such as QEMU/Spike to support
the POC.
